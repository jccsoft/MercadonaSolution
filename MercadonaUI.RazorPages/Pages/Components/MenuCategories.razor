@namespace Components

@implements IDisposable
@inject PersistentComponentState applicationState
@inject IHttpClientFactory ClientFactory


@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else if (categories == null)
{
    <MudText Style="font-size:inherit" GutterBottom="true">Cargando...</MudText>
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTreeView Items="@TreeItems" Dense="true" Hover="true" ExpandOnClick="true" MultiSelection="false" Color="Color.Primary"
                 SelectedValueChanged="((TreeItemData t) => SelectionChanged(t))">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                    <MudText Style="font-size:inherit;">@context.Category.Name</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
}


@code {
    [Parameter]
    public EventCallback<CategoryDto> SelectedCategoryChanged { get; set; }

    private const string cachingKey = "menucategories";
    private PersistingComponentStateSubscription persistingSubscription;

    private List<CategoryDto>? categories;
    private string errorMessage = "";

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public CategoryDto Category { get; set; }

        public bool IsExpanded { get; set; } = false;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(CategoryDto category)
        {
            Category = category;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = applicationState.RegisterOnPersisting(PersistData);

        if (applicationState.TryTakeFromJson<bool>(cachingKey, out var restored))
        {
            var client = ClientFactory.CreateClient(MercadonaOptions.HttpClientName);
            HttpResponseMessage response = await client.GetAsync("categories");
            if (response.IsSuccessStatusCode)
            {
                var catResponse = response.Content.ReadFromJsonAsync<ApiResponse<List<CategoryDto>>>();
                if (catResponse != null && catResponse.Result != null)
                {
                    categories = catResponse.Result.Data;
                    InitializeTreeItems(TreeItems);
                }
            }
            else
            {
                errorMessage = response.ReasonPhrase ?? "Error desconocido";
            }
        }
    }


    private void SelectionChanged(TreeItemData treeItem)
    {
        if (treeItem != null)
        {
            SelectedCategoryChanged.InvokeAsync(treeItem.Category);
        }
    }


    private void InitializeTreeItems(HashSet<TreeItemData> treeItems, int parentId = 0)
    {
        foreach (var category in categories!.Where(c => c.ParentId == parentId))
        {
            TreeItemData t = new TreeItemData(category);
            InitializeTreeItems(t.TreeItems, category.Id);
            treeItems.Add(t);
        };
    }


    private Task PersistData()
    {
        applicationState.PersistAsJson(cachingKey, true);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}
