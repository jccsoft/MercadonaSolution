@inject IHttpClientFactory ClientFactory


@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else if (categories == null)
{
    <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
}
else
{
    <MudPaper Elevation="1" Style="background-color:whitesmoke;">
        <MudTreeView Items="@TreeItems" Dense="true" Hover="true" ExpandOnClick="true" MultiSelection="false" Color="Color.Primary"
                 SelectedValueChanged="((TreeItemData t) => SelectionChanged(t))">
        <ItemTemplate>
                <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                    <MudText Style="font-size:inherit;">@context.Category.Name</MudText>

                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
    </MudPaper>
}


@code {
    [Parameter]
    public bool SetDefaultCategory { get; set; } = false;

    [Parameter]
    public List<int> CategoryIds { get; set; } = new();

    [Parameter] 
    public EventCallback<CategoryDto> SelectedCategoryChanged { get; set; }


    private List<CategoryDto>? categories;
    private string errorMessage = "";

    private HashSet<TreeItemData> TreeItems { get; set; } = new();

    private List<int> cachedCategoryIds = new();

    public class TreeItemData
    {
        public CategoryDto Category { get; set; }

        public bool IsExpanded { get; set; } = false;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(CategoryDto category)
        {
            Category = category;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient(MercadonaOptions.HttpClientName);
        HttpResponseMessage response = await client.GetAsync("categories");
        if (response.IsSuccessStatusCode)
        {
            var catResponse = response.Content.ReadFromJsonAsync<ApiResponse<List<CategoryDto>>>();
            if (catResponse != null && catResponse.Result != null)
            {
                categories = catResponse.Result.Data;
                InitializeTreeItems(TreeItems);

                if (SetDefaultCategory)
                {
                    int defaultCategoryId = categories?.FirstOrDefault()?.Id ?? 0;
                    if (defaultCategoryId == 0) return;
                    var defaultTreeItem = TreeItems.Where(t => t.Category.Id == defaultCategoryId).First();
                    defaultTreeItem.IsExpanded = true;
                    await SelectedCategoryChanged.InvokeAsync(defaultTreeItem.Category);                    
                }
            }
        }
        else
        {
            errorMessage = response.ReasonPhrase ?? "Error desconocido";
        }
    }

    protected override void OnParametersSet()
    {
        if (CheckParamsChanged())
        {
            TreeItems = new();
            InitializeTreeItems(TreeItems);

            cachedCategoryIds = CategoryIds.ToList();
        }
    }

    private void SelectionChanged(TreeItemData treeItem)
    {
        if (treeItem != null) SelectedCategoryChanged.InvokeAsync(treeItem.Category);
    }


    private void InitializeTreeItems(HashSet<TreeItemData> treeItems, int parentId = 0)
    {
        foreach (var category in categories!.Where(c => c.ParentId == parentId))
        {
            if (CategoryIds.Count == 0 || CategoryIds.Contains(category.Id))
            {
                TreeItemData t = new TreeItemData(category);
                InitializeTreeItems(t.TreeItems, category.Id);
                treeItems.Add(t);                
            }
        };
    }

    private bool CheckParamsChanged() => 
            (categories != null &&
            (CategoryIds.Count != cachedCategoryIds.Count ||
            CategoryIds.Except(cachedCategoryIds).Any() ||
            cachedCategoryIds.Except(CategoryIds).Any()));
}
