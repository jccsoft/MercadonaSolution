
@inject IHttpClientFactory _clientFactory
@inject ImagesHelper _imagesHelper

<PageTitle>Mercadona</PageTitle>

<MudGrid Style="font-size: 0.8rem;">

    <MudItem xs="2">
    </MudItem>
    <MudItem xs="10">
        <MudTextField Value="@requestParams.Search" DebounceInterval="500" Immediate="true" ValueChanged="((string value) => SearchValueChanged(value))"
            Placeholder="Producto" Variant="Variant.Text" Style="font-size:larger" Class="ml-3"
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"></MudTextField>
    </MudItem>

    <MudItem xs="2">
        <MenuCatTreeView SelectedCategoryChanged="OnSelectedCategoryChanged" />
    </MudItem>

    <MudItem xs="10">

        @if (requestParams.CategoryId > 0)
        {
            <MudChip OnClose="CloseCategory" Color="Color.Default" Style="font-size:inherit" Class="ml-3 mb-2">
                @selectedCategory!.Name
            </MudChip>
        }


        @if (string.IsNullOrWhiteSpace(errorMessage) == false)
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
        else if (requestParams.ReadyForRequest() == false)
        {
            <span></span>
        }
        else if (recordsNotFound)
        {
            <MudText>No se han encontrado productos que coincidan con estos criterios</MudText>
        }
        else if (productsResponse == null || productsResponse.Data == null)
        {
            <MudText Style="font-size:inherit" GutterBottom="true">Buscando productos...</MudText>
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {

            <MudText Style="font-size: smaller;" Class="ml-4">@headerMessage</MudText>
            
            if (productsResponse.TotalPages > 1)
            {
                <div class="d-flex flex-column align-center">
                    <MudPagination Selected="@requestParams.CurrentPage" SelectedChanged="((int value) => SelectedPageChanged(value))"
                        Color="Color.Primary" Count="@productsResponse.TotalPages" Class="mb-1"/>
                </div>
            }


            <MudPaper Class="d-flex flex-wrap gap-0" Elevation="0">
                @foreach (var product in @productsResponse.Data)
                {
                    <ProductDisplay Product="product" />
                }
            </MudPaper>

            <MudScrollToTop>
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
        }
    </MudItem>
</MudGrid>


@code {
    private HttpClient? httpClient;
    private ApiResponse<List<ProductModel>>? productsResponse;
    private ProductsRequestParams requestParams = new();
    private CategoryDto? selectedCategory;

    private bool recordsNotFound = false;
    private string errorMessage = "";
    private string headerMessage = "";


    protected override void OnInitialized()
    {
        httpClient = _clientFactory.CreateClient(MercadonaOptions.HttpClientName);
        requestParams.ItemsXPage = 24;
    }

    private async Task GetProducts()
    {
        productsResponse = null;
        errorMessage = "";
        recordsNotFound = false;

        if (requestParams.ReadyForRequest())
        {
            string httpRequest = $"products{requestParams.GetParametersForUrl()}";

            HttpResponseMessage response = await httpClient!.GetAsync(httpRequest);

            if (response.IsSuccessStatusCode)
            {
                productsResponse = await response.Content.ReadFromJsonAsync<ApiResponse<List<ProductModel>>>();
                if (productsResponse == null || productsResponse.Data == null || productsResponse.TotalCount == 0)
                {
                    recordsNotFound = true;
                    return;
                }

                headerMessage = $"Mostrando {productsResponse.Data.Count} de {productsResponse.TotalCount} productos.";
                await _imagesHelper.DownloadProductsImages(productsResponse.Data);

            }
            else
            {
                errorMessage = response.ReasonPhrase ?? "Error desconocido";
            }
        }

    }



    private async Task SearchValueChanged(string newValue)
    {
        if (requestParams.Search.Trim().ToLower() != newValue.Trim().ToLower())
        {
            requestParams.Search = newValue;
            requestParams.CurrentPage = 1;
            await GetProducts();            
        }
    }

    private async Task SelectedPageChanged(int newValue)
    {
        requestParams.CurrentPage = newValue;
        await GetProducts();
    }


    private async Task OnSelectedCategoryChanged(CategoryDto value)
    {
        selectedCategory = value;
        requestParams.CategoryId = selectedCategory.Id;
        await GetProducts();
    }

    private async Task CloseCategory()
    {
        requestParams.CategoryId = 0;
        await GetProducts();
    }
}